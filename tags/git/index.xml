<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on MEMO</title>
    <link>https://tk-zzz.github.io/tags/git/</link>
    <description>Recent content in Git on MEMO</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 25 May 2020 16:04:46 +0900</lastBuildDate>
    
	<atom:link href="https://tk-zzz.github.io/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>【Git】削除ファイルなども含めて戻す方法</title>
      <link>https://tk-zzz.github.io/posts/2020/git_checkout_f/</link>
      <pubDate>Mon, 25 May 2020 16:04:46 +0900</pubDate>
      
      <guid>https://tk-zzz.github.io/posts/2020/git_checkout_f/</guid>
      <description>git checkout . で今いるブランチの最新のCommitにもどせるが、削除したファイルなどは戻らず削除されたままとなる。
実際に
git status すると削除したファイルが残っていることが確認できる。
しかし、
git checkout -f と-fをつけると、削除したファイルも含めてもとに戻すことができる。
（これをしらなくてCloneし直したりしていた…）</description>
    </item>
    
    <item>
      <title>【Git】ローカルブランチを全削除する</title>
      <link>https://tk-zzz.github.io/posts/2020/remove_all_branches/</link>
      <pubDate>Mon, 18 May 2020 11:58:28 +0900</pubDate>
      
      <guid>https://tk-zzz.github.io/posts/2020/remove_all_branches/</guid>
      <description>このコマンドでmaster以外のローカルブランチをすべて削除できる。
(masterも削除しようとするが消せないので結果的にmasterだけ残る)
git branch | xargs git branch -D また、例えば任意の文字列を含むブランチを消したい場合はgrepをかませることで実現できる。
たとえばfeature/~~~というブランチを全部削除する場合は下記のようにしている。
git branch | grep feature | xargs git branch -D ただ、これだとfeature/~~~のブランチだけでなくfeatureが含まれる名前のブランチすべてが削除されるので注意。</description>
    </item>
    
    <item>
      <title>間違えてgit commit --amendしてしまったときの解決方法</title>
      <link>https://tk-zzz.github.io/posts/2020/solution_git_commit_amend/</link>
      <pubDate>Thu, 20 Feb 2020 00:00:00 +0900</pubDate>
      
      <guid>https://tk-zzz.github.io/posts/2020/solution_git_commit_amend/</guid>
      <description>間違えてgit commit -a &amp;ndash;amendしてしまい、 一つ前のcommitに入れたくない変更が入ってしまった。
git resetで戻そうと思い、git logで履歴を確認するが 先頭がamendしたcommitになっておりresetできなくて困った。
解決方法 git reflogでHEADの変更履歴がみれるので、 amendする前の状態にresetすることができる。
resetしたあと普通にgit commit -aすることで解決した。</description>
    </item>
    
    <item>
      <title>Initial commitに後続のcommitを含めたい</title>
      <link>https://tk-zzz.github.io/posts/2020/rebase_initial_commit/</link>
      <pubDate>Fri, 10 Jan 2020 00:00:00 +0900</pubDate>
      
      <guid>https://tk-zzz.github.io/posts/2020/rebase_initial_commit/</guid>
      <description>Initial commitに後続のcommitを含めたかったので、
git rebase -i HEAD^^^ したところ、
fatal: Needed a single revision invalid upstream &amp;#39;HEAD^^^&amp;#39; と表示されてできない。
調べてみると
git rebase -i --root でInitial commitを含めたrebaseができるらしい。
実際にやってみるといつものrebase画面にInitialCommitが表示されたので、
普段のrebaseと同様にsquashすることで後続のCommitを消してInitalCommitに含めることができた。</description>
    </item>
    
  </channel>
</rss>